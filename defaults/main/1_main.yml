---

no_prompts: false
debug: false
force_update: false

# default config => is overwritten by provided config
defaults_haproxy:
  version: '2.8'
  frontends: {}
  backends: {}
  waf: {}

  # see: https://www.haproxy.com/blog/exploring-the-haproxy-stats-page
  stats:
    enable: false  # enable http listener for haproxy stats
    bind: '127.0.0.1:8404'
    refresh: '10s'
    admin: false
    admin_if: 'LOCALHOST'
    user: 'haproxy'
    pwd: 'monitor'
    realm: 'Authorized Personal Only'
    log: true  # allows you to disable logging of stats access

  acme:  # see also: https://github.com/dehydrated-io/dehydrated/blob/master/docs/examples/config
    enable: false
    email:
    ocsp_must_staple: false
    ocsp_fetch: false
    manage_challenge: true  # set-up nginx-light to handle acme challenge-responses
    challenge_port: 8405  # port the webserver for challenge-responses listens on
    ca: 'letsencrypt'
    domains: []

  geoip:
    enable: false
    manage_db: true
    lookup_port: 8406
    provider: 'ipinfo'
    token:
    # todo: log geoip drops in tcp-mode

  global:
    log:
      - '/dev/log    local0'
      - '/dev/log    local1 notice'
    chroot: '/var/lib/haproxy'
    'stats socket': '/run/haproxy/admin.sock mode 660 level admin'
    'stats timeout': '30s'
    ca-base: '/etc/ssl/certs'
    crt-base: '/etc/ssl/private'
    ssl-default-bind-ciphers: "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384\
    :ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:\
    DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384"
    ssl-default-bind-ciphersuites: 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256'
    ssl-default-bind-options: 'ssl-min-ver TLSv1.2 no-tls-tickets'

  defaults:
    log: 'global'
    mode: 'http'
    option:
      - 'httplog'
      - 'dontlognull'
    'timeout connect': 5000
    'timeout client': 50000
    'timeout server': 50000
    'errorfile 400': '/etc/haproxy/errors/400.http'
    'errorfile 403': '/etc/haproxy/errors/403.http'
    'errorfile 408': '/etc/haproxy/errors/408.http'
    'errorfile 500': '/etc/haproxy/errors/500.http'
    'errorfile 502': '/etc/haproxy/errors/502.http'
    'errorfile 503': '/etc/haproxy/errors/503.http'
    'errorfile 504': '/etc/haproxy/errors/504.http'

  root_lines: []  # add lines to the root of the main config file

defaults_frontend:
  mode: 'http'
  http2: true  # appends 'alpn h2,http/1.1' to bind
  bind: ['[::]:80 v4v6']
  # ipv4 only: ':80'
  # ssl with acme enabled: ':443 ssl'
  # ssl with custom cert: ':443 ssl crt /etc/ssl/haproxy/site.pem'
  acme:
    enable: false
    domains: []

  ssl_redirect: true
  security:
    headers: true
    fingerprint_ssl: false  # create and log the JA3/JA4 fingerprint of clients
    fingerprint_ssl_type: 'ja3n'  # WARNING: ja4 is not yet in a usable state!

    restrict_methods: false
    allow_only_methods: ['HEAD', 'GET', 'POST']
    # if 'restrict_methods' is disabled - this will still deny 'TRACE' & 'CONNECT' as they might open your server/services up to attacks
    deny_dangerous_methods: true

    block_script_bots: false
    block_bad_crawler_bots: false
    block_script_kiddies: false  # you might have to define 'haproxy.waf.script_kiddy.excludes' for your use-cases

    flag_bots: false
    flag_bots_lines: []  # additional checks you want to append; you could p.e. check if a cookie set by JS exists
    # is auto-prepended: 'http-request set-var(txn.bot) int(1) if !{ var(txn.bot) -m found } ' before your conditions

  log:
    user_agent: true

  geoip:
    enable: false
    # what attributes to look-up:
    country: true
    asn: true
    as_name: false

  lines: {}  # raw config lines to add - section to lines mapping to make resulting config human-readable

  routes: {}
  #  backend_name:
  #     domains: ['hostname1', 'hostname2']
  #     filter_country: ['AT', 'DE', 'CH']
  #     filter_not_country: []
  #     filter_asn: [13335]
  #     filter_not_asn: []
  #     filter_ip: ['10.0.0.0/8']
  #     filter_not_ip: []

  headers:  # you might want to set 'security_headers' to false if you want to control those headers; see below for defaults
    request: {}
    response: {}

  default_backend:

defaults_backend:
  mode: 'http'
  balance:

  lines: {}  # raw config lines to add - section to lines mapping to make resulting config human-readable

  servers: []
  ssl: false
  ssl_verify: 'none'  # example: 'required ca-file /etc/ssl/certs/my_ca.crt verifyhost host01.intern'
  sticky: false  # set cookie to stick sessions to a specific backend server
  sticky_http:
    cookie: 'srv'
  sticky_tcp:
    match: 'src'
    table: 'type ip size 5k expire 120m'

  security:
    restrict_methods: false
    allow_only_methods: ['HEAD', 'GET', 'POST']
    # if 'restrict_methods' is disabled - this will still deny 'TRACE' & 'CONNECT' as they might open your server/services up to attacks
    deny_dangerous_methods: false

    block_script_bots: false
    block_bad_crawler_bots: false
    block_script_kiddies: false  # you might have to define 'haproxy.waf.script_kiddy.excludes' for your use-cases

    flag_bots: false
    flag_bots_lines: []  # additional checks you want to append; you could p.e. check if a cookie set by JS exists
    # is auto-prepended: 'http-request set-var(txn.bot) int(1) if !{ var(txn.bot) -m found } ' before your conditions

  basic_auth:
    users: {}
    plaintext: true  # NOTE: currently we only support plaintext password in the config

  # for health-checks see: https://www.haproxy.com/blog/how-to-enable-health-checks-in-haproxy
  #   more complex ones should be implemented by supplying the raw config-lines
  check: true
  check_http: false  # httpchk
  check_method: 'GET'
  check_uri:
  check_expect:

# NOTE: if your application adds these response headers - they will not be overwritten
defaults_security_headers:
  Strict-Transport-Security: 'max-age=16000000; includeSubDomains; preload;'
  X-Frame-Options: 'SAMEORIGIN'  # https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
  X-Content-Type-Options: 'nosniff'  # https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options
  X-Permitted-Cross-Domain-Policies: 'none'

defaults_frontend_route:
  domains: []
  filter_country: []
  filter_not_country: []
  filter_asn: []
  filter_not_asn: []
  filter_ip: []
  filter_not_ip: []
